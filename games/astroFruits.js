// Global variables for p5.js sketch
let gamePhase = 'intro'; // 'intro', 'playing', 'level_complete', 'game_over', 'instructions', 'achievements'
let startTime = 0;
let transitionAlpha = 1;
let pointerStyle = 0; // For cursor graphics
let activeKeys = {}; // Stores currently pressed keys
let spacePressed = false; // Tracks if spacebar was just pressed
let isMouseOut = false; // Tracks if mouse is outside canvas

let isLagging = false; // Can be toggled for performance (though p5.js handles this better)
let initialStage = 1; // Starting level

let player;
let currentLevelData;
let platforms = [];
let collectibleFruits = [];
let exitPoint;

let totalFruitsCollected = 0;
let currentLevelFruits = 0;
let unlockedAchievements = {}; // Stores achievement status

// Game configuration
const GRAVITY_STRENGTH = 0.3;
const JUMP_POWER = -7;
const PLAYER_SPEED = 3;
const MAX_JUMPS = 2; // Double jump
const GRAVITY_TOGGLE_LEVEL = 3; // Level from which gravity can be turned off

// Pixel art assets
let GameAssets = {};

// Function to show custom message box
function showMessageBox(title, content, callback) {
    const msgBox = document.getElementById('messageBox');
    document.getElementById('messageBoxTitle').innerText = title;
    document.getElementById('messageBoxContent').innerText = content;
    msgBox.style.display = 'flex';
    const closeButton = document.getElementById('messageBoxClose');
    closeButton.onclick = () => {
        msgBox.style.display = 'none';
        if (callback) callback();
    };
}

// --- Cookie (localStorage) Management ---
const GAME_DATA_KEY = 'fruitDungeonGameData';

function saveGameData() {
    const gameData = {
        totalFruitsCollected: totalFruitsCollected,
        unlockedAchievements: unlockedAchievements,
        lastPlayedLevel: player ? player.currentLevel : initialStage // Save current level if playing
    };
    localStorage.setItem(GAME_DATA_KEY, JSON.stringify(gameData));
    console.log('Game data saved:', gameData);
}

function loadGameData() {
    const savedData = localStorage.getItem(GAME_DATA_KEY);
    if (savedData) {
        const gameData = JSON.parse(savedData);
        totalFruitsCollected = gameData.totalFruitsCollected || 0;
        unlockedAchievements = gameData.unlockedAchievements || {};
        initialStage = gameData.lastPlayedLevel || 1; // Set starting level to last played
        console.log('Game data loaded:', gameData);
    } else {
        console.log('No saved game data found.');
    }
}

function resetGameData() {
    localStorage.removeItem(GAME_DATA_KEY);
    totalFruitsCollected = 0;
    unlockedAchievements = {};
    initialStage = 1;
    showMessageBox('איפוס נתונים', 'כל נתוני המשחק אופסו בהצלחה!');
    console.log('Game data reset.');
}

// --- Achievement Logic ---
function checkAchievements() {
    // Achievement 1: אספן פירות - collect 10 fruits
    if (totalFruitsCollected >= 10 && !unlockedAchievements['fruitCollector']) {
        unlockedAchievements['fruitCollector'] = true;
        showMessageBox('הישג חדש!', 'אספן פירות: אספת 10 פירות!');
        saveGameData();
    }
    // Achievement 2: קפצן על - complete level 5
    if (player && player.currentLevel >= 5 && !unlockedAchievements['superJumper']) {
        unlockedAchievements['superJumper'] = true;
        showMessageBox('הישג חדש!', 'קפצן על: השלמת שלב 5!');
        saveGameData();
    }
    // Achievement 3: חוקר מיומן - complete level 10
    if (player && player.currentLevel >= 10 && !unlockedAchievements['skilledExplorer']) {
        unlockedAchievements['skilledExplorer'] = true;
        showMessageBox('הישג חדש!', 'חוקר מיומן: השלמת שלב 10!');
        saveGameData();
    }
}

// --- Player Class ---
class Player {
    constructor(x, y, level) {
        this.x = x;
        this.y = y;
        this.velX = 0;
        this.velY = 0;
        this.width = 20;
        this.height = 30;
        this.onGround = false;
        this.jumpsLeft = MAX_JUMPS;
        this.gravityEnabled = true;
        this.currentLevel = level;
        this.sparkleTimer = 0; // For the new visual element
    }

    update() {
        // Apply gravity if enabled
        if (this.gravityEnabled) {
            this.velY += GRAVITY_STRENGTH;
        }

        // Horizontal movement
        if (activeKeys[LEFT_ARROW] || activeKeys[65]) { // Left or A
            this.velX = -PLAYER_SPEED;
        } else if (activeKeys[RIGHT_ARROW] || activeKeys[68]) { // Right or D
            this.velX = PLAYER_SPEED;
        } else {
            this.velX = 0;
        }

        // Vertical movement (jumping)
        if ((activeKeys[UP_ARROW] || activeKeys[87]) && this.jumpsLeft > 0) { // Up or W
            this.velY = JUMP_POWER;
            this.jumpsLeft--;
            this.onGround = false; // Player is off ground after jump
            activeKeys[UP_ARROW] = false; // Consume jump key press
            activeKeys[87] = false;
        }

        // Gravity toggle (spacebar)
        if (this.currentLevel >= GRAVITY_TOGGLE_LEVEL && activeKeys[32] && !spacePressed) {
            this.gravityEnabled = !this.gravityEnabled;
            spacePressed = true; // Mark space as pressed to prevent rapid toggling
        }
        if (!activeKeys[32]) { // If spacebar is released
            spacePressed = false;
        }

        this.x += this.velX;
        this.y += this.velY;

        // Collision with canvas edges
        if (this.x < this.width / 2) {
            this.x = this.width / 2;
            this.velX = 0;
        } else if (this.x > width - this.width / 2) {
            this.x = width - this.width / 2;
            this.velX = 0;
        }

        // Collision with platforms
        this.onGround = false;
        for (let p of platforms) {
            if (this.collidesWith(p)) {
                // If falling and hit top of platform
                if (this.velY > 0 && this.y + this.height / 2 > p.y - p.height / 2 && this.y - this.height / 2 < p.y - p.height / 2) {
                    this.y = p.y - p.height / 2 - this.height / 2;
                    this.velY = 0;
                    this.onGround = true;
                    this.jumpsLeft = MAX_JUMPS; // Reset jumps on ground
                }
                // If jumping and hit bottom of platform
                else if (this.velY < 0 && this.y - this.height / 2 < p.y + p.height / 2 && this.y + this.height / 2 > p.y + p.height / 2) {
                    this.y = p.y + p.height / 2 + this.height / 2;
                    this.velY = 0;
                }
                // Horizontal collision
                else if (this.velX > 0) { // Moving right
                    this.x = p.x - p.width / 2 - this.width / 2;
                    this.velX = 0;
                } else if (this.velX < 0) { // Moving left
                    this.x = p.x + p.width / 2 + this.width / 2;
                    this.velX = 0;
                }
            }
        }

        // If player falls off screen, game over
        if (this.y > height + 50) {
            gamePhase = 'game_over';
            showMessageBox('הפסדת!', 'נפלת מהמפה. נסה שוב!');
        }

        // Update sparkle timer for visual effect
        this.sparkleTimer = (this.sparkleTimer + 1) % 60; // Cycle every second
    }

    draw() {
        fill(255, 100, 100); // Player color
        rect(this.x, this.y, this.width, this.height);

        // Draw sparkle effect (non-essential element)
        if (this.sparkleTimer < 30) {
            fill(255, 255, 0, 150);
            ellipse(this.x + random(-5, 5), this.y + random(-10, 10), 5, 5);
        }
    }

    collidesWith(obj) {
        return (
            this.x + this.width / 2 > obj.x - obj.width / 2 &&
            this.x - this.width / 2 < obj.x + obj.width / 2 &&
            this.y + this.height / 2 > obj.y - obj.height / 2 &&
            this.y - this.height / 2 < obj.y + obj.height / 2
        );
    }
}

// --- Platform Class ---
class Platform {
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }

    draw() {
        fill(100, 100, 100); // Platform color
        rect(this.x, this.y, this.width, this.height);
    }
}

// --- Collectible Fruit Class ---
class CollectibleFruit {
    constructor(x, y, type) {
        this.x = x;
        this.y = y;
        this.radius = 15;
        this.collected = false;
        this.type = type; // Index for GameAssets.collectibleFruits
    }

    draw() {
        if (!this.collected) {
            image(GameAssets.collectibleFruits[this.type], this.x, this.y, this.radius * 2, this.radius * 2);
        }
    }

    collect() {
        this.collected = true;
        totalFruitsCollected++;
        currentLevelFruits++;
        checkAchievements();
        saveGameData();
    }
}

// --- Exit Point Class ---
class ExitPoint {
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.width = w;
        this.height = h;
    }

    draw() {
        fill(0, 200, 0, 150); // Green exit point
        rect(this.x, this.y, this.width, this.height);
        image(GameAssets.bossIcon, this.x, this.y, this.width * 0.8, this.height * 0.8); // Use skull as exit icon
    }
}

// --- Level Data (Simplified for demonstration) ---
const levelData = {
    1: {
        playerStart: { x: 100, y: 100 },
        platforms: [
            { x: 300, y: 500, w: 600, h: 50 },
            { x: 150, y: 400, w: 100, h: 20 },
            { x: 450, y: 300, w: 150, h: 20 },
            { x: 200, y: 200, w: 80, h: 20 }
        ],
        fruits: [
            { x: 150, y: 350, type: 0 },
            { x: 450, y: 250, type: 1 }
        ],
        exit: { x: 550, y: 150, w: 50, h: 50 }
    },
    2: {
        playerStart: { x: 50, y: 50 },
        platforms: [
            { x: 300, y: 550, w: 600, h: 50 },
            { x: 100, y: 450, w: 100, h: 20 },
            { x: 250, y: 350, w: 120, h: 20 },
            { x: 400, y: 250, w: 100, h: 20 },
            { x: 550, y: 150, w: 80, h: 20 }
        ],
        fruits: [
            { x: 100, y: 400, type: 1 },
            { x: 300, y: 300, type: 2 },
            { x: 500, y: 100, type: 0 }
        ],
        exit: { x: 700, y: 50, w: 50, h: 50 }
    },
    3: { // Gravity toggle level
        playerStart: { x: 100, y: 100 },
        platforms: [
            { x: 300, y: 500, w: 600, h: 50 },
            { x: 150, y: 400, w: 100, h: 20 },
            { x: 450, y: 300, w: 150, h: 20 },
            { x: 200, y: 200, w: 80, h: 20 },
            { x: 500, y: 100, w: 100, h: 20 }
        ],
        fruits: [
            { x: 150, y: 350, type: 0 },
            { x: 450, y: 250, type: 1 },
            { x: 500, y: 50, type: 2 }
        ],
        exit: { x: 700, y: 50, w: 50, h: 50 }
    },
    // Add more levels as needed, up to 14
    4: {
        playerStart: { x: 50, y: 500 },
        platforms: [
            { x: 300, y: 550, w: 600, h: 50 },
            { x: 150, y: 450, w: 100, h: 20 },
            { x: 350, y: 350, w: 120, h: 20 },
            { x: 550, y: 250, w: 100, h: 20 },
            { x: 750, y: 150, w: 80, h: 20 }
        ],
        fruits: [
            { x: 150, y: 400, type: 2 },
            { x: 350, y: 300, type: 0 },
            { x: 550, y: 200, type: 1 }
        ],
        exit: { x: 750, y: 100, w: 50, h: 50 }
    },
    5: {
        playerStart: { x: 100, y: 500 },
        platforms: [
            { x: 300, y: 550, w: 600, h: 50 },
            { x: 200, y: 400, w: 100, h: 20 },
            { x: 400, y: 300, w: 120, h: 20 },
            { x: 600, y: 200, w: 100, h: 20 },
            { x: 700, y: 100, w: 80, h: 20 }
        ],
        fruits: [
            { x: 200, y: 350, type: 1 },
            { x: 400, y: 250, type: 0 },
            { x: 600, y: 150, type: 2 }
        ],
        exit: { x: 700, y: 50, w: 50, h: 50 }
    }
    // ... more levels up to 14
};

// --- Game Initialization ---
function loadLevel(levelNum) {
    currentLevelFruits = 0;
    if (levelData[levelNum]) {
        currentLevelData = levelData[levelNum];
        player = new Player(currentLevelData.playerStart.x, currentLevelData.playerStart.y, levelNum);
        platforms = currentLevelData.platforms.map(p => new Platform(p.x, p.y, p.w, p.h));
        collectibleFruits = currentLevelData.fruits.map(f => new CollectibleFruit(f.x, f.y, f.type));
        exitPoint = new ExitPoint(currentLevelData.exit.x, currentLevelData.exit.y, currentLevelData.exit.w, currentLevelData.exit.h);
    } else {
        // Game completed!
        gamePhase = 'game_over';
        showMessageBox('כל הכבוד!', 'השלמת את כל השלבים הזמינים! אתה גיבור הפירות!');
        player = null; // Clear player
    }
}

// --- p5.js Sketch ---
let sketch = function(p) {
    p.setup = function() {
        let canvasParent = p.select('#game-canvas');
        let canvas = p.createCanvas(600, 600).parent(canvasParent);
        p.pixelDensity(1); // Equivalent to noSmooth() for sharp pixels
        p.rectMode(p.CENTER);
        p.textAlign(p.CENTER, p.CENTER);
        p.imageMode(p.CENTER);
        p.frameRate(60);

        // Load game data on setup
        loadGameData();
        loadLevel(initialStage);

        // Generate pixel art assets
        GameAssets = (function() {
            let assets = {};

            // Helper for pixel art generation
            function createPixelArt(size, graphics, scaleFactors = null) {
                // Create a temporary graphics buffer to draw the pixel art
                let pg = p.createGraphics(p.width, p.height);
                pg.pixelDensity(1); // Ensure pixel perfect drawing
                pg.background(0, 0, 0, 0); // Transparent background
                pg.push();
                pg.translate(pg.width / 2, pg.height / 2); // Center for drawing
                pg.scale(size);
                if (scaleFactors) {
                    pg.scale(scaleFactors[0], scaleFactors[1]);
                }
                pg.strokeWeight(1);
                let limits = [[0, 0], [0, 0]]; // [minX, maxX], [minY, maxY]

                for (let i = 0; i < graphics.length; i++) {
                    if (graphics[i].length === 2) { // It's a point [x, y]
                        pg.point(graphics[i][0], graphics[i][1]);
                        limits[0][0] = p.min(limits[0][0], graphics[i][0]);
                        limits[0][1] = p.max(limits[0][1], graphics[i][0]);
                        limits[1][0] = p.min(limits[1][0], graphics[i][1]);
                        limits[1][1] = p.max(limits[1][1], graphics[i][1]);
                    } else { // It's a color [r, g, b, (a)]
                        pg.stroke(graphics[i][0], graphics[i][1], graphics[i][2], graphics[i].length === 4 ? graphics[i][3] : 255);
                    }
                }
                pg.pop();

                // Get the image based on calculated limits from the graphics buffer
                let imgWidth = (p.abs(limits[0][1]) + p.abs(limits[0][0]) + 1) * size;
                let imgHeight = (p.abs(limits[1][1]) + p.abs(limits[1][0]) + 1) * size;
                let imgX = pg.width / 2 - p.abs(limits[0][0]) * size;
                let imgY = pg.height / 2 - p.abs(limits[1][0]) * size;

                // Ensure dimensions are positive and non-zero
                imgWidth = p.max(1, imgWidth);
                imgHeight = p.max(1, imgHeight);

                return pg.get(imgX, imgY, imgWidth, imgHeight);
            }

            // Asset definitions (renamed and slightly reordered)
            assets.pointerGraphics = [];
            assets.pointerGraphics.push(createPixelArt(2, [[255,255,255],[-2,-6],[-5,-5],[-4,-5],[-3,-5],[-2,-5],[-1,-5],[-5,-4],[-4,-4],[-3,-4],[0,-4],[1,-4],[-5,-3],[-4,-3],[-3,-3],[-2,-3],[-1,-3],[0,-3],[1,-3],[-6,-2],[-5,-2],[-3,-2],[-2,-2],[-1,-2],[0,-2],[1,-2],[-5,-1],[-3,-1],[-2,-1],[-1,-1],[1,-1],[2,-1],[-4,0],[-3,0],[-2,0],[0,0],[1,0],[2,0],[5,0],[6,0],[-4,1],[-3,1],[-2,1],[-1,1],[0,1],[1,1],[5,1],[6,1],[-1,2],[0,2],[4,2],[5,2],[6,2],[3,3],[4,3],[5,3],[6,3],[2,4],[3,4],[4,4],[5,4],[0,5],[1,5],[2,5],[3,5],[4,5],[0,6],[1,6],[2,6],[3,6]]));
            assets.pointerGraphics.push(createPixelArt(2, [[255,255,255],[-9,-9],[-8,-9],[-7,-9],[-6,-9],[-9,-8],[-8,-8],[-7,-8],[-6,-8],[-5,-8],[-9,-7],[-8,-7],[-7,-7],[-6,-7],[-5,-7],[-4,-7],[-3,-7],[-9,-6],[-8,-6],[-7,-6],[-3,-6],[-8,-5],[-7,-5],[-5,-5],[-4,-5],[-3,-5],[-2,-5],[-1,-5],[-7,-4],[-5,-4],[-4,-4],[-3,-4],[-2,-4],[0,-4],[-7,-3],[-6,-3],[-5,-3],[-4,-3],[-3,-3],[-2,-3],[-1,-3],[1,-3],[2,-3],[-5,-2],[-4,-2],[-3,-2],[-2,-2],[-1,-2],[0,-2],[1,-2],[2,-2],[-5,-1],[-3,-1],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[-4,0],[-2,0],[-1,0],[0,0],[2,0],[3,0],[-3,1],[-2,1],[-1,1],[1,1],[2,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[5,2],[0,3],[5,3],[6,3],[7,3],[8,3],[9,3],[4,4],[5,4],[6,4],[7,4],[8,4],[9,4],[2,5],[3,5],[4,5],[5,5],[6,5],[3,6],[4,6],[5,6],[3,7],[4,7],[3,8],[4,8],[3,9],[4,9]]));

            assets.fontGlyphs = [];
            // A
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[-3,-3],[-2,-3],[2,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[0,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[1,1],[2,1]]));
            // B
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[2,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // C
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[1,-2],[2,-2],[3,-2],[-3,-1],[0,-1],[1,-1],[2,-1],[-3,0],[0,0],[1,0],[2,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[-2,-1],[-1,-1],[-2,0],[-1,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // D
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[-3,-3],[2,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[0,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[2,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[255,255,255],[-2,-3],[-1,-3],[0,-3],[1,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[1,-1],[2,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[0,1],[1,1]]));
            // E
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[1,-2],[2,-2],[3,-2],[-3,-1],[2,-1],[-3,0],[0,0],[1,0],[2,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[-2,0],[-1,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // F
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[1,-2],[2,-2],[3,-2],[-3,-1],[2,-1],[3,-1],[-3,0],[0,0],[1,0],[2,0],[-3,1],[0,1],[1,1],[2,1],[-3,2],[-2,2],[-1,2],[0,2],[-3,3],[-2,3],[-1,3],[0,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[-2,0],[-1,0],[-2,1],[-1,1]]));
            // G
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[1,-2],[2,-2],[3,-2],[-3,-1],[0,-1],[1,-1],[2,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[-2,-1],[-1,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // H
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[0,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[0,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[1,1],[2,1]]));
            // I
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[-2,-3],[1,-3],[-2,-2],[1,-2],[-2,-1],[1,-1],[-2,0],[1,0],[-2,1],[1,1],[-2,2],[-1,2],[0,2],[1,2],[-2,3],[-1,3],[0,3],[1,3],[255,255,255],[-1,-3],[0,-3],[-1,-2],[0,-2],[-1,-1],[0,-1],[-1,0],[0,0],[-1,1],[0,1]]));
            // J
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[0,-4],[1,-4],[2,-4],[0,-3],[2,-3],[3,-3],[0,-2],[3,-2],[-3,-1],[-2,-1],[-1,-1],[0,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[1,-3],[1,-2],[2,-2],[1,-1],[2,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // K
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[0,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[2,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[0,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[1,1],[2,1]]));
            // L
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[-3,-3],[-2,-3],[0,-3],[-3,-2],[0,-2],[-3,-1],[0,-1],[-3,0],[0,0],[1,0],[2,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[-2,-2],[-1,-2],[-2,-1],[-1,-1],[-2,0],[-1,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // M
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-4,-3],[-3,-3],[-1,-3],[0,-3],[1,-3],[3,-3],[4,-3],[-4,-2],[0,-2],[4,-2],[-4,-1],[4,-1],[-4,0],[-1,0],[1,0],[4,0],[-4,1],[-1,1],[0,1],[1,1],[4,1],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[4,2],[-4,3],[-3,3],[-2,3],[-1,3],[1,3],[2,3],[3,3],[4,3],[255,255,255],[-2,-3],[2,-3],[-3,-2],[-2,-2],[-1,-2],[1,-2],[2,-2],[3,-2],[-3,-1],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[3,-1],[-3,0],[-2,0],[0,0],[2,0],[3,0],[-3,1],[-2,1],[2,1],[3,1]]));
            // N
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-4,-3],[-3,-3],[-1,-3],[0,-3],[3,-3],[-4,-2],[0,-2],[3,-2],[-4,-1],[3,-1],[-4,0],[-1,0],[3,0],[-4,1],[-1,1],[0,1],[3,1],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-4,3],[-3,3],[-2,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-2,-3],[1,-3],[2,-3],[-3,-2],[-2,-2],[-1,-2],[1,-2],[2,-2],[-3,-1],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[-3,0],[-2,0],[0,0],[1,0],[2,0],[-3,1],[-2,1],[1,1],[2,1]]));
            // O
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[-3,-3],[-2,-3],[2,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[0,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[1,-1],[2,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // P
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[3,-1],[-3,0],[0,0],[1,0],[2,0],[3,0],[-3,1],[0,1],[-3,2],[-2,2],[-1,2],[0,2],[-3,3],[-2,3],[-1,3],[0,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[-2,0],[-1,0],[-2,1],[-1,1]]));
            // Q
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[-4,-3],[-3,-3],[2,-3],[-4,-2],[-1,-2],[2,-2],[-4,-1],[-1,-1],[2,-1],[-4,0],[-1,0],[2,0],[3,0],[-4,1],[3,1],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-4,3],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-2,-3],[2,-3],[-3,-2],[-2,-2],[0,-2],[1,-2],[-3,-1],[-2,-1],[0,-1],[1,-1],[-3,0],[-2,0],[0,0],[1,0],[-3,1],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // R
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[2,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[0,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[1,1],[2,1]]));
            // S
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[-2,-3],[3,-3],[-3,-2],[0,-2],[1,-2],[2,-2],[3,-2],[-3,-1],[3,-1],[-3,0],[-2,0],[-1,0],[0,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[0,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[1,0],[2,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // T
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-4,-4],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-4,-3],[3,-3],[-4,-2],[-3,-2],[-2,-2],[1,-2],[2,-2],[3,-2],[-2,-1],[1,-1],[-2,0],[1,0],[-2,1],[1,1],[-2,2],[-1,2],[0,2],[1,2],[-2,3],[-1,3],[0,3],[1,3],[255,255,255],[-3,-3],[-2,-3],[-1,-3],[0,-3],[1,-3],[2,-3],[-1,-2],[0,-2],[-1,-1],[0,-1],[-1,0],[0,0],[-1,1],[0,1]]));
            // U
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[-3,-3],[-2,-3],[0,-3],[2,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[0,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-1,-3],[1,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[1,-1],[2,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));
            // V
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[0,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[0,-1],[3,-1],[-3,0],[-2,0],[2,0],[3,0],[-3,1],[-2,1],[-1,1],[1,1],[2,1],[3,1],[-2,2],[-1,2],[0,2],[1,2],[2,2],[-1,3],[0,3],[1,3],[255,255,255],[-2,-3],[-1,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[1,-1],[2,-1],[-1,0],[0,0],[1,0],[0,1]]));
            // W
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-3,-4],[-2,-4],[-1,-4],[1,-4],[2,-4],[3,-4],[-4,-3],[-3,-3],[-1,-3],[0,-3],[1,-3],[3,-3],[4,-3],[-4,-2],[-1,-2],[1,-2],[4,-2],[-4,-1],[4,-1],[-4,0],[0,0],[4,0],[-4,1],[-1,1],[0,1],[1,1],[4,1],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[4,2],[-4,3],[-3,3],[-2,3],[-1,3],[1,3],[2,3],[3,3],[4,3],[255,255,255],[-2,-3],[2,-3],[-3,-2],[-2,-2],[0,-2],[2,-2],[3,-2],[-3,-1],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[3,-1],[-3,0],[-2,0],[-1,0],[1,0],[2,0],[3,0],[-3,1],[-2,1],[2,1],[3,1]]));
            // X
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-3,-3],[0,-3],[3,-3],[-3,-2],[0,-2],[3,-2],[-3,-1],[-2,-1],[2,-1],[3,-1],[-3,0],[0,0],[3,0],[-3,1],[0,1],[3,1],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-3,3],[-2,3],[-1,3],[1,3],[2,3],[3,3],[255,255,255],[-2,-3],[-1,-3],[1,-3],[2,-3],[-2,-2],[-1,-2],[1,-2],[2,-2],[-1,-1],[0,-1],[1,-1],[-2,0],[-1,0],[1,0],[2,0],[-2,1],[-1,1],[1,1],[2,1]]));
            // Y
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-4,-4],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-4,-3],[-1,-3],[0,-3],[3,-3],[-4,-2],[-1,-2],[0,-2],[3,-2],[-4,-1],[-3,-1],[2,-1],[3,-1],[-4,0],[-3,0],[-2,0],[1,0],[2,0],[3,0],[-3,1],[-2,1],[1,1],[2,1],[-2,2],[-1,2],[0,2],[1,2],[-2,3],[-1,3],[0,3],[1,3],[255,255,255],[-3,-3],[-2,-3],[1,-3],[2,-3],[-3,-2],[-2,-2],[1,-2],[2,-2],[-2,-1],[-1,-1],[0,-1],[1,-1],[-1,0],[0,0],[-1,1],[0,1]]));
            // Z
            assets.fontGlyphs.push(createPixelArt(20, [[0,0,0],[-4,-4],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[-4,-3],[3,-3],[-4,-2],[-3,-2],[-2,-2],[-1,-2],[0,-2],[3,-2],[-4,-1],[3,-1],[-4,0],[-1,0],[0,0],[1,0],[2,0],[3,0],[-4,1],[3,1],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[-4,3],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[255,255,255],[-3,-3],[-2,-3],[-1,-3],[0,-3],[1,-3],[2,-3],[1,-2],[2,-2],[-3,-1],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[-3,0],[-2,0],[-3,1],[-2,1],[-1,1],[0,1],[1,1],[2,1]]));


            assets.bossIcon = createPixelArt(2, [[80,80,80],[-1,-7],[0,-7],[1,-7],[-3,-6],[-2,-6],[-1,-6],[0,-6],[1,-6],[2,-6],[3,-6],[-4,-5],[-3,-5],[-2,-5],[-1,-5],[0,-5],[1,-5],[2,-5],[3,-5],[4,-5],[-5,-4],[-4,-4],[-3,-4],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[4,-4],[5,-4],[-5,-3],[-4,-3],[-3,-3],[-2,-3],[-1,-3],[0,-3],[1,-3],[2,-3],[3,-3],[4,-3],[5,-3],[-5,-2],[-4,-2],[-3,-2],[-2,-2],[-1,-2],[0,-2],[1,-2],[2,-2],[3,-2],[4,-2],[5,-2],[-5,-1],[-4,-1],[-1,-1],[0,-1],[1,-1],[4,-1],[5,-1],[-5,0],[-1,0],[0,0],[1,0],[5,0],[-5,1],[-1,1],[0,1],[1,1],[5,1],[-5,2],[-4,2],[-3,2],[-2,2],[-1,2],[1,2],[2,2],[3,2],[4,2],[5,2],[-5,3],[-4,3],[-3,3],[-2,3],[2,3],[3,3],[4,3],[5,3],[-5,4],[-4,4],[-3,4],[-2,4],[-1,4],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[-4,5],[-3,5],[-2,5],[-1,5],[0,5],[1,5],[2,5],[3,5],[4,5],[-3,6],[-1,6],[0,6],[1,6],[3,6],[-3,7],[-1,7],[1,7],[3,7]]);

            // Water background (renamed)
            let waterPg = p.createGraphics(p.width, p.height);
            waterPg.pixelDensity(1);
            waterPg.background(0, 0, 0, 0);
            waterPg.strokeWeight(4);
            for(let i = 200; i < 500; i++){
                waterPg.stroke(150 - i / 1.5, 200 - i / 1.5, 255 - i / 2, 60 + (i - 200) / 4);
                waterPg.line(0, i + 100, 600, i + 100);
            }
            assets.liquidBackground = waterPg.get(0, 0, 600, 600);

            assets.collectibleFruits = [];
            // Fruit 1 (Apple-like)
            assets.collectibleFruits.push(createPixelArt(20, [[5,0,0],[-7,-15],[-6,-15],[-7,-14],[-6,-14],[-5,-14],[-7,-13],[-4,-13],[-3,-13],[-7,-12],[-3,-12],[-2,-12],[-7,-11],[-2,-11],[-1,-11],[-7,-10],[-6,-10],[-1,-10],[-6,-9],[0,-9],[-6,-8],[-5,-8],[1,-8],[-5,-7],[-4,-7],[1,-7],[-8,-6],[-7,-6],[-6,-6],[-5,-6],[-4,-6],[-3,-6],[1,-6],[2,-6],[3,-6],[4,-6],[5,-6],[6,-6],[7,-6],[8,-6],[-10,-5],[-9,-5],[-8,-5],[-3,-5],[-2,-5],[-1,-5],[0,-5],[1,-5],[8,-5],[9,-5],[10,-5],[-11,-4],[10,-4],[11,-4],[-12,-3],[-11,-3],[11,-3],[12,-3],[-13,-2],[-12,-2],[12,-2],[-13,-1],[12,-1],[13,-1],[-13,0],[13,0],[-14,1],[13,1],[14,1],[-14,2],[14,2],[-14,3],[14,3],[-14,4],[14,4],[-14,5],[14,5],[-13,6],[13,6],[-13,7],[13,7],[-13,8],[13,8],[-12,9],[12,9],[-12,10],[-11,10],[11,10],[12,10],[-11,11],[11,11],[-11,12],[-10,12],[-9,12],[10,12],[-9,13],[-8,13],[8,13],[9,13],[-8,14],[-7,14],[6,14],[7,14],[-6,15],[-5,15],[-4,15],[-3,15],[-2,15],[-1,15],[0,15],[1,15],[2,15],[3,15],[4,15],[5,15],[73,138,70],[-6,-13],[-6,-12],[-6,-11],[-5,-11],[-5,-10],[-4,-10],[-5,-9],[-4,-9],[-3,-9],[-4,-8],[-3,-8],[24,130,30],[-5,-13],[-5,-12],[-4,-12],[-4,-11],[-3,-11],[-2,-10],[-1,-9],[-1,-8],[0,-8],[-3,-7],[-2,-7],[-2,-6],[3,89,3],[-3,-10],[-2,-9],[-2,-8],[-1,-7],[0,-7],[-1,-6],[0,-6],[251,119,8],[-7,-5],[-6,-5],[-5,-5],[-4,-5],[4,-5],[5,-5],[6,-5],[7,-5],[-10,-4],[-9,-4],[-8,-4],[-7,-4],[-6,-4],[-5,-4],[-4,-4],[-3,-4],[-2,-4],[3,-4],[4,-4],[5,-4],[6,-4],[7,-4],[-10,-3],[-9,-3],[-5,-3],[-4,-3],[-3,-3],[3,-3],[4,-3],[5,-3],[6,-3],[7,-3],[8,-3],[-11,-2],[-10,-2],[-5,-2],[-4,-2],[-3,-2],[-2,-2],[-1,-2],[0,-2],[1,-2],[2,-2],[3,-2],[4,-2],[5,-2],[6,-2],[7,-2],[8,-2],[-12,-1],[-11,-1],[-5,-1],[-4,-1],[-3,-1],[-2,-1],[-1,-1],[0,-1],[1,-1],[2,-1],[3,-1],[4,-1],[5,-1],[6,-1],[7,-1],[8,-1],[9,-1],[-12,0],[-11,0],[-5,0],[-4,0],[-3,0],[-2,0],[-1,0],[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[-13,1],[-12,1],[-11,1],[-8,1],[-7,1],[-6,1],[-5,1],[-4,1],[-3,1],[-2,1],[-1,1],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[-13,2],[-12,2],[-11,2],[-10,2],[-9,2],[-8,2],[-7,2],[-6,2],[-5,2],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[-13,3],[-12,3],[-8,3],[-7,3],[-6,3],[-5,3],[-4,3],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[8,3],[9,3],[-13,4],[-12,4],[-8,4],[-7,4],[-6,4],[-5,4],[-4,4],[-3,4],[-2,4],[-1,4],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[7,4],[8,4],[9,4],[-13,5],[-12,5],[-8,5],[-7,5],[-6,5],[-5,5],[-4,5],[-3,5],[-2,5],[-1,-5],[0,-5],[1,-5],[2,-5],[3,-5],[4,-5],[5,-5],[6,-5],[7,-5],[8,-5],[9,-5],[-12,6],[-11,6],[-10,6],[-9,6],[-8,6],[-7,6],[-6,6],[-5,6],[-4,6],[-3,6],[-2,6],[-1,6],[0,6],[1,6],[2,6],[3,6],[4,6],[5,6],[6,6],[7,6],[8,6],[-12,7],[-11,7],[-10,7],[-9,7],[-8,7],[-7,7],[-6,7],[-5,7],[-4,7],[-3,7],[-2,7],[-1,7],[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],[-12,8],[-11,8],[-10,8],[-9,8],[-8,8],[-7,8],[-6,8],[-5,8],[-4,8],[-3,8],[-2,8],[-1,8],[0,8],[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[-11,9],[-10,9],[-9,9],[-8,9],[-7,9],[-6,9],[-5,9],[-4,9],[-3,9],[-2,9],[-1,-9],[0,-9],[1,-9],[2,-9],[3,-9],[4,-9],[5,-9],[6,-9],[-10,10],[-9,10],[-8,10],[-7,10],[-6,10],[-5,10],[-4,10],[-3,10],[-2,10],[-1,10],[0,10],[1,10],[2,10],[3,10],[4,10],[-10,11],[-9,11],[-8,11],[-7,11],[-6,11],[-5,11],[-4,11],[-3,11],[-2,11],[-1,11],[0,11],[1,11],[2,11],[-8,12],[-7,12],[-6,12],[251,165,105],[2,-5],[3,-5],[-1,-4],[0,-4],[1,-4],[2,-4],[-8,-3],[-7,-3],[-6,-3],[-2,-3],[-1,-3],[0,-3],[1,-3],[2,-3],[-9,-2],[-8,-2],[-7,-2],[-6,-2],[-10,-1],[-9,-1],[-8,-1],[-7,-1],[-6,-1],[-10,0],[-9,0],[-8,0],[-7,0],[-6,0],[-10,1],[-9,1],[-11,3],[-10,3],[-9,3],[-11,4],[-10,4],[-9,4],[-11,5],[-10,5],[-9,5],[235,119,78],[8,-4],[9,-4],[9,-3],[10,-3],[9,-2],[10,-2],[11,-2],[10,-1],[11,-1],[10,0],[11,0],[12,0],[10,1],[11,1],[12,1],[10,2],[11,2],[12,2],[10,3],[11,3],[10,4],[11,4],[10,5],[11,5],[9,6],[10,6],[11,6],[9,7],[10,7],[11,7],[8,8],[9,8],[10,8],[11,8],[7,9],[8,9],[9,9],[10,9],[5,10],[6,10],[7,10],[8,10],[9,10],[3,11],[4,11],[5,11],[6,11],[7,11],[8,11],[-5,12],[-4,12],[-3,12],[-2,12],[-1,12],[0,12],[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[-7,13],[-6,13],[-5,13],[-4,13],[-3,13],[-2,13],[-1,13],[0,13],[1,13],[2,13],[3,13],[4,13],[-6,14],[-5,14],[-4,14],[189,73,32],[13,2],[12,3],[13,3],[12,4],[13,4],[12,5],[13,5],[12,6],[12,7],[12,8],[11,9],[10,10],[9,11],[10,11],[8,12],[9,12],[5,13],[6,13],[7,13],[-3,14],[-2,14],[-1,14],[0,14],[1,14],[2,14],[3,14],[4,14],[5,14]]));
            // Fruit 2 (Strawberry-like)
            assets.collectibleFruits.push(createPixelArt(20, [[5,0,0],[-7,-17],[-7,-16],[-6,-16],[-5,-16],[-7,-15],[-5,-15],[-4,-15],[-7,-14],[-4,-14],[-3,-14],[3,-14],[4,-14],[5,-14],[6,-14],[7,-14],[-7,-13],[-3,-13],[-2,-13],[2,-13],[3,-13],[7,-13],[-7,-12],[-2,-12],[-1,-12],[1,-12],[7,-12],[-7,-11],[-6,-11],[-1,-11],[0,-11],[1,-11],[7,-11],[-6,-10],[-5,-10],[0,-10],[6,-10],[7,-10],[-5,-9],[0,-9],[5,-9],[6,-9],[-5,-8],[-4,-8],[-1,-8],[0,-8],[4,-8],[5,-8],[-7,-7],[-6,-7],[-5,-7],[-4,-7],[-3,-7],[-2,-7],[-1,-7],[4,-7],[-9,-6],[-8,-6],[-1,-6],[3,-6],[4,-6],[5,-6],[6,-6],[7,-6],[8,-6],[9,-6],[-10,-5],[-9,-5],[-1,-5],[0,-5],[1,-5],[2,-5],[9,-5],[10,-5],[-11,-4],[-10,-4],[10,-4],[-12,-3],[-11,-3],[12,-3],[-12,-2],[12,-2],[-13,-1],[-12,-1],[12,-1],[-13,0],[13,0],[-13,1],[13,1],[-13,2],[13,2],[-13,3],[13,3],[-13,4],[13,4],[-13,5],[13,5],[-13,6],[13,6],[-13,7],[13,7],[-13,8],[-12,8],[12,8],[-12,9],[12,9],[-12,10],[11,10],[-12,11],[11,11],[-11,12],[-10,12],[10,12],[-10,13],[-9,13],[10,13],[-9,14],[-8,14],[9,14],[-8,15],[-7,15],[-6,15],[7,15],[8,15],[-6,16],[-1,16],[0,16],[1,16],[2,16],[6,16],[7,16],[-5,17],[-4,17],[-3,17],[-2,17],[3,17],[4,17],[5,17],[73,138,70],[-6,-15],[-6,-14],[-6,-13],[-5,-12],[-5,-11],[24,130,30],[-5,-14],[-5,-13],[-4,-13],[-6,-12],[-3,-12],[-2,-11],[-4,-10],[-4,-9],[-3,-9],[-3,-8],[-2,-8],[135,68,3],[4,-13],[5,-13],[6,-13],[2,-12],[3,-12],[4,-12],[5,-12],[6,-12],[2,-11],[3,-11],[4,-11],[5,-11],[6,-11],[1,-10],[2,-10],[3,-10],[4,-10],[5,-10],[1,-9],[2,-9],[3,-9],[4,-9],[1,-8],[2,-8],[3,-8],[0,-7],[1,-7],[2,-7],[3,-7],[0,-6],[1,-6],[2,-6],[24,95,30],[-4,-12],[-4,-11],[-3,-11],[-3,-10],[-2,-10],[-2,-9],[3,89,3],[-1,-10],[-1,-9],[251,3,8],[-7,-6],[-6,-6],[-5,-6],[-4,-6],[-3,-6],[-8,-5],[-7,-5],[-6,-5],[-5,-5],[-4,-5],[-3,-5],[5,-5],[6,-5],[7,-5],[8,-5],[-9,-4],[-8,-4],[-4,-4],[-3,-4],[6,-4],[7,-4],[8,-4],[9,-4],[-10,-3],[-4,-3],[-3,-3],[-2,-3],[-1,-3],[0,-3],[4,-3],[6,-3],[7,-3],[8,-3],[9,-3],[10,-3],[-11,-2],[-10,-2],[-5,-2],[-4,-2],[-3,-2],[-2,-2],[-1,-2],[0,-2],[1,-2],[2,-2],[3,-2],[6,-2],[7,-2],[8,-2],[9,-2],[10,-2],[-11,-1],[-10,-1],[-5,-1],[-4,-1],[-3,-1],[-2,-1],[-1,-1],[0,-1],[5,-1],[6,-1],[7,-1],[8,-1],[9,-1],[10,-1],[-12,0],[-11,0],[-10,0],[-6,0],[-5,0],[-4,0],[-3,0],[-2,0],[-1,0],[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[-12,1],[-11,1],[-10,1],[-9,1],[-8,1],[-7,1],[-6,1],[-5,1],[-4,1],[-3,1],[-2,1],[-1,1],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[-12,2],[-11,2],[-10,2],[-9,2],[-8,2],[-7,2],[-6,2],[-5,2],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2],[11,2],[-12,3],[-11,3],[-10,3],[-8,3],[-7,3],[-6,3],[-5,3],[-4,3],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[8,3],[9,3],[10,3],[11,3],[-12,4],[-11,4],[-7,4],[-6,4],[-5,4],[-4,4],[-3,4],[-2,4],[-1,4],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[7,4],[8,4],[9,4],[10,4],[-12,5],[-11,5],[-7,5],[-6,5],[-5,5],[-4,5],[-3,5],[-2,5],[-1,5],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5],[-12,6],[-11,6],[-8,6],[-7,6],[-6,6],[-5,6],[-4,6],[-3,6],[-2,6],[-1,6],[0,6],[1,6],[2,6],[3,6],[4,6],[5,6],[6,6],[7,6],[8,6],[9,6],[-12,7],[-11,7],[-10,7],[-9,7],[-8,7],[-7,7],[-6,7],[-5,7],[-4,7],[-3,7],[-2,7],[-1,7],[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],[-11,8],[-10,8],[-9,8],[-8,8],[-7,8],[-6,8],[-5,8],[-4,8],[-3,8],[-2,8],[-1,8],[0,8],[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,8],[-11,9],[-10,9],[-9,9],[-8,9],[-7,9],[-6,9],[-5,9],[-4,9],[-3,9],[-2,9],[-1,-9],[0,-9],[1,-9],[2,-9],[3,-9],[4,-9],[5,-9],[6,-9],[7,-9],[-11,10],[-10,10],[-9,10],[-8,10],[-7,10],[-6,10],[-5,10],[-4,10],[-3,10],[-2,10],[-1,10],[0,10],[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[-11,11],[-10,11],[-9,11],[-8,11],[-7,11],[-6,11],[-5,11],[-4,11],[-3,11],[-2,11],[-1,11],[0,11],[1,11],[2,11],[3,11],[4,11],[5,11],[-9,12],[-8,12],[-7,12],[-6,12],[-5,12],[-4,12],[-3,12],[-2,12],[-1,12],[0,12],[1,12],[2,12],[3,12],[-8,13],[-7,13],[-6,13],[-5,13],[-4,13],[-3,13],[-7,14],[132,11,8],[-2,-6],[-2,-5],[3,-5],[4,-5],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[4,-4],[11,-4],[1,-3],[2,-3],[3,-3],[11,-3],[11,-2],[11,-1],[11,0],[12,0],[11,1],[12,1],[12,2],[12,3],[11,4],[12,4],[11,5],[12,5],[10,6],[11,6],[12,6],[10,7],[11,7],[12,7],[9,8],[10,8],[11,8],[8,9],[9,9],[10,9],[11,9],[7,10],[8,10],[9,10],[10,10],[6,11],[7,11],[8,11],[9,11],[10,11],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[-2,13],[-1,13],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[-6,14],[-5,14],[-4,14],[189,73,32],[13,2],[12,3],[13,3],[12,4],[13,4],[12,5],[13,5],[12,6],[12,7],[12,8],[11,9],[10,10],[9,11],[10,11],[8,12],[9,12],[5,13],[6,13],[7,13],[-3,14],[-2,14],[-1,14],[0,14],[1,14],[2,14],[3,14],[4,14],[5,14]]));
            // Fruit 3 (Orange-like)
            assets.collectibleFruits.push(createPixelArt(20, [[5,0,0],[-7,-17],[-7,-16],[-6,-16],[-5,-16],[-7,-15],[-5,-15],[-4,-15],[-7,-14],[-4,-14],[-3,-14],[3,-14],[4,-14],[5,-14],[6,-14],[7,-14],[-7,-13],[-3,-13],[-2,-13],[2,-13],[3,-13],[7,-13],[-7,-12],[-2,-12],[-1,-12],[1,-12],[7,-12],[-7,-11],[-6,-11],[-1,-11],[0,-11],[1,-11],[7,-11],[-6,-10],[-5,-10],[0,-10],[6,-10],[7,-10],[-5,-9],[0,-9],[5,-9],[6,-9],[-5,-8],[-4,-8],[-1,-8],[0,-8],[4,-8],[5,-8],[-7,-7],[-6,-7],[-5,-7],[-4,-7],[-3,-7],[-2,-7],[-1,-7],[4,-7],[-9,-6],[-8,-6],[-1,-6],[3,-6],[4,-6],[5,-6],[6,-6],[7,-6],[8,-6],[9,-6],[-10,-5],[-9,-5],[-1,-5],[0,-5],[1,-5],[2,-5],[9,-5],[10,-5],[-11,-4],[-10,-4],[10,-4],[-12,-3],[-11,-3],[12,-3],[-12,-2],[12,-2],[-13,-1],[-12,-1],[12,-1],[-13,0],[13,0],[-13,1],[13,1],[-13,2],[13,2],[-13,3],[13,3],[-13,4],[13,4],[-13,5],[13,5],[-13,6],[13,6],[-13,7],[13,7],[-13,8],[-12,8],[12,8],[-12,9],[12,9],[-12,10],[11,10],[-12,11],[11,11],[-11,12],[-10,12],[10,12],[-10,13],[-9,13],[10,13],[-9,14],[-8,14],[9,14],[-8,15],[-7,15],[-6,15],[7,15],[8,15],[-6,16],[-1,16],[0,16],[1,16],[2,16],[6,16],[7,16],[-5,17],[-4,17],[-3,17],[-2,17],[3,17],[4,17],[5,17],[73,138,70],[-6,-15],[-6,-14],[-6,-13],[-5,-12],[-5,-11],[24,130,30],[-5,-14],[-5,-13],[-4,-13],[-6,-12],[-3,-12],[-2,-11],[-4,-10],[-4,-9],[-3,-9],[-3,-8],[-2,-8],[135,68,3],[4,-13],[5,-13],[6,-13],[2,-12],[3,-12],[4,-12],[5,-12],[6,-12],[2,-11],[3,-11],[4,-11],[5,-11],[6,-11],[1,-10],[2,-10],[3,-10],[4,-10],[5,-10],[1,-9],[2,-9],[3,-9],[4,-9],[1,-8],[2,-8],[3,-8],[0,-7],[1,-7],[2,-7],[3,-7],[0,-6],[1,-6],[2,-6],[24,95,30],[-4,-12],[-4,-11],[-3,-11],[-3,-10],[-2,-10],[-2,-9],[3,89,3],[-1,-10],[-1,-9],[251,155,155],[-7,-6],[-6,-6],[-5,-6],[-4,-6],[-3,-6],[-8,-5],[-7,-5],[-6,-5],[-5,-5],[-4,-5],[-3,-5],[5,-5],[6,-5],[7,-5],[8,-5],[-9,-4],[-8,-4],[-4,-4],[-3,-4],[6,-4],[7,-4],[8,-4],[9,-4],[-10,-3],[-4,-3],[-3,-3],[-2,-3],[-1,-3],[0,-3],[4,-3],[6,-3],[7,-3],[8,-3],[9,-3],[10,-3],[-11,-2],[-10,-2],[-5,-2],[-4,-2],[-3,-2],[-2,-2],[-1,-2],[0,-2],[1,-2],[2,-2],[3,-2],[6,-2],[7,-2],[8,-2],[9,-2],[10,-2],[-11,-1],[-10,-1],[-5,-1],[-4,-1],[-3,-1],[-2,-1],[-1,-1],[0,-1],[5,-1],[6,-1],[7,-1],[8,-1],[9,-1],[10,-1],[-12,0],[-11,0],[-10,0],[-6,0],[-5,0],[-4,0],[-3,0],[-2,0],[-1,0],[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[-12,1],[-11,1],[-10,1],[-9,1],[-8,1],[-7,1],[-6,1],[-5,1],[-4,1],[-3,1],[-2,1],[-1,1],[0,1],[1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[-12,2],[-11,2],[-10,2],[-9,2],[-8,2],[-7,2],[-6,2],[-5,2],[-4,2],[-3,2],[-2,2],[-1,2],[0,2],[1,2],[2,2],[3,2],[4,2],[5,2],[6,2],[7,2],[8,2],[9,2],[10,2],[11,2],[-12,3],[-11,3],[-10,3],[-8,3],[-7,3],[-6,3],[-5,3],[-4,3],[-3,3],[-2,3],[-1,3],[0,3],[1,3],[2,3],[3,3],[4,3],[5,3],[6,3],[7,3],[8,3],[9,3],[10,3],[11,3],[-12,4],[-11,4],[-7,4],[-6,4],[-5,4],[-4,4],[-3,4],[-2,4],[-1,4],[0,4],[1,4],[2,4],[3,4],[4,4],[5,4],[6,4],[7,4],[8,4],[9,4],[10,4],[-12,5],[-11,5],[-7,5],[-6,5],[-5,5],[-4,5],[-3,5],[-2,5],[-1,5],[0,5],[1,5],[2,5],[3,5],[4,5],[5,5],[6,5],[7,5],[8,5],[9,5],[10,5],[-12,6],[-11,6],[-8,6],[-7,6],[-6,6],[-5,6],[-4,6],[-3,6],[-2,6],[-1,6],[0,6],[1,6],[2,6],[3,6],[4,6],[5,6],[6,6],[7,6],[8,6],[9,6],[-12,7],[-11,7],[-10,7],[-9,7],[-8,7],[-7,7],[-6,7],[-5,7],[-4,7],[-3,7],[-2,7],[-1,7],[0,7],[1,7],[2,7],[3,7],[4,7],[5,7],[6,7],[7,7],[8,7],[9,7],[-11,8],[-10,8],[-9,8],[-8,8],[-7,8],[-6,8],[-5,8],[-4,8],[-3,8],[-2,8],[-1,8],[0,8],[1,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,8],[-11,9],[-10,9],[-9,9],[-8,9],[-7,9],[-6,9],[-5,9],[-4,9],[-3,9],[-2,9],[-1,-9],[0,-9],[1,-9],[2,-9],[3,-9],[4,-9],[5,-9],[6,-9],[7,-9],[-11,10],[-10,10],[-9,10],[-8,10],[-7,10],[-6,10],[-5,10],[-4,10],[-3,10],[-2,10],[-1,10],[0,10],[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[-11,11],[-10,11],[-9,11],[-8,11],[-7,11],[-6,11],[-5,11],[-4,11],[-3,11],[-2,11],[-1,11],[0,11],[1,11],[2,11],[3,11],[4,11],[5,11],[-9,12],[-8,12],[-7,12],[-6,12],[-5,12],[-4,12],[-3,12],[-2,12],[-1,12],[0,12],[1,12],[2,12],[3,12],[-8,13],[-7,13],[-6,13],[-5,13],[-4,13],[-3,13],[-7,14],[132,11,8],[-2,-6],[-2,-5],[3,-5],[4,-5],[-2,-4],[-1,-4],[0,-4],[1,-4],[2,-4],[3,-4],[4,-4],[11,-4],[1,-3],[2,-3],[3,-3],[11,-3],[11,-2],[11,-1],[11,0],[12,0],[11,1],[12,1],[12,2],[12,3],[11,4],[12,4],[11,5],[12,5],[10,6],[11,6],[12,6],[10,7],[11,7],[12,7],[9,8],[10,8],[11,8],[8,9],[9,9],[10,9],[11,9],[7,10],[8,10],[9,10],[10,10],[6,11],[7,11],[8,11],[9,11],[10,11],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[-2,13],[-1,13],[0,13],[1,13],[2,13],[3,13],[4,13],[5,13],[6,13],[7,13],[8,13],[9,13],[-6,14],[-5,14],[-4,14],[189,73,32],[13,2],[12,3],[13,3],[12,4],[13,4],[12,5],[13,5],[12,6],[12,7],[12,8],[11,9],[10,10],[9,11],[10,11],[8,12],[9,12],[5,13],[6,13],[7,13],[-3,14],[-2,14],[-1,14],[0,14],[1,14],[2,14],[3,14],[4,14],[5,14]]));

            return assets;
        })();
    };

    p.draw = function() {
        p.background(0); // Clear background each frame

        // Draw background elements
        p.image(GameAssets.liquidBackground, p.width / 2, p.height / 2, p.width, p.height);

        switch (gamePhase) {
            case 'intro':
                drawIntroScreen(p);
                break;
            case 'playing':
                updateGame(p);
                drawGame(p);
                break;
            case 'level_complete':
                drawLevelCompleteScreen(p);
                break;
            case 'game_over':
                drawGameOverScreen(p);
                break;
            case 'instructions':
                drawInstructionsScreen(p);
                break;
            case 'achievements':
                drawAchievementsScreen(p);
                break;
        }

        // Custom cursor
        p.noCursor();
        if (!isMouseOut) {
            p.image(GameAssets.pointerGraphics[pointerStyle], p.mouseX, p.mouseY);
        }
    };

    p.keyPressed = function() {
        activeKeys[p.keyCode] = true;
    };

    p.keyReleased = function() {
        activeKeys[p.keyCode] = false;
    };

    p.mouseMoved = function() {
        // Change cursor style on mouse movement (simple animation)
        pointerStyle = (p.frameCount % 20 < 10) ? 0 : 1;
    };

    p.mouseOut = function() {
        isMouseOut = true;
    };

    p.mouseOver = function() {
        isMouseOut = false;
    };

    // Handle window resizing
    p.windowResized = function() {
        // This will resize the canvas to fit its parent div.
        // For pixel art games, often fixed dimensions are preferred,
        // but this ensures the canvas scales with the browser window.
        let canvasParent = p.select('#game-canvas');
        p.resizeCanvas(canvasParent.width, canvasParent.height);
    };

    // --- Game Screens ---

    function drawIntroScreen(p) {
        p.fill(255);
        p.textSize(48);
        p.text('מבוך הפירות', p.width / 2, p.height / 2 - 100);
        p.textSize(24);
        p.text('לחץ על "התחל משחק" כדי להתחיל', p.width / 2, p.height / 2 + 50);
    }

    function updateGame(p) {
        player.update();

        // Check for fruit collection
        for (let i = collectibleFruits.length - 1; i >= 0; i--) {
            if (player.collidesWith(collectibleFruits[i]) && !collectibleFruits[i].collected) {
                collectibleFruits[i].collect();
            }
        }

        // Check for exit point
        if (player.collidesWith(exitPoint) && collectibleFruits.every(f => f.collected)) {
            gamePhase = 'level_complete';
            saveGameData(); // Save progress
            showMessageBox('שלב הושלם!', `כל הכבוד! השלמת את שלב ${player.currentLevel}.`);
        } else if (player.collidesWith(exitPoint) && !collectibleFruits.every(f => f.collected)) {
            // Player reached exit but didn't collect all fruits
            showMessageBox('אופס!', 'עליך לאסוף את כל הפירות לפני שתוכל לעבור לשלב הבא!');
            // Teleport player back a bit or reset level
            player.x = currentLevelData.playerStart.x;
            player.y = currentLevelData.playerStart.y;
            player.velX = 0;
            player.velY = 0;
        }
    }

    function drawGame(p) {
        player.draw();
        for (let plat of platforms) {
            plat.draw();
        }
        for (let fruit of collectibleFruits) {
            fruit.draw();
        }
        exitPoint.draw();

        // Display current level and fruits collected in level
        p.fill(255);
        p.textSize(18);
        p.textAlign(p.LEFT, p.TOP);
        p.text(`שלב: ${player.currentLevel}`, 10, 10);
        p.text(`פירות בשלב: ${currentLevelFruits}/${collectibleFruits.length}`, 10, 30);
        p.text(`פירות סך הכל: ${totalFruitsCollected}`, 10, 50);
        p.textAlign(p.CENTER, p.CENTER); // Reset for other text
    }

    function drawLevelCompleteScreen(p) {
        p.fill(255);
        p.textSize(36);
        p.text('שלב הושלם!', p.width / 2, p.height / 2 - 50);
        p.textSize(24);
        p.text(`השלמת את שלב ${player.currentLevel}.`, p.width / 2, p.height / 2);
        p.text('לחץ על "התחל משחק" כדי להמשיך לשלב הבא', p.width / 2, p.height / 2 + 50);
    }

    function drawGameOverScreen(p) {
        p.fill(255, 0, 0);
        p.textSize(48);
        p.text('המשחק נגמר!', p.width / 2, p.height / 2 - 50);
        p.fill(255);
        p.textSize(24);
        p.text('לחץ על "התחל משחק" כדי להתחיל מחדש', p.width / 2, p.height / 2 + 50);
    }

    function drawInstructionsScreen(p) {
        p.fill(255);
        p.textSize(32);
        p.text('הוראות המשחק', p.width / 2, 80);
        p.textSize(20);
        p.textAlign(p.RIGHT, p.TOP); // Align text to the right for Hebrew
        p.text('השתמשו במקשי החיצים או WASD כדי לזוז.', p.width - 50, 150);
        p.text('אתם יכולים לבצע קפיצה כפולה.', p.width - 50, 190);
        p.text(`החל משלב ${GRAVITY_TOGGLE_LEVEL} תוכלו ללחוץ על מקש רווח (Space) כדי לבטל את כוח המשיכה.`, p.width - 50, 230);
        p.text('איסוף כל הפירות בשלב פותח את היציאה.', p.width - 50, 270);
        p.text('היזהרו מליפול מהמפה!', p.width - 50, 310);
        p.textAlign(p.CENTER, p.CENTER); // Reset alignment
        p.textSize(24);
        p.text('לחצו על "התחל משחק" כדי לחזור למסך הראשי', p.width / 2, p.height - 80);
    }

    function drawAchievementsScreen(p) {
        p.fill(255);
        p.textSize(32);
        p.text('לוח הישגים', p.width / 2, 80);
        p.textSize(20);
        p.textAlign(p.RIGHT, p.TOP); // Align text to the right for Hebrew

        let achievementY = 150;
        const lineHeight = 40;

        p.text('אספן פירות: אסוף 10 פירות', p.width - 50, achievementY);
        if (unlockedAchievements['fruitCollector']) {
            p.fill(0, 255, 0);
            p.text('✓ הושלם', p.width - 50, achievementY + 20);
            p.fill(255);
        } else {
            p.fill(255, 0, 0);
            p.text('✗ לא הושלם', p.width - 50, achievementY + 20);
            p.fill(255);
        }
        achievementY += lineHeight * 2;

        p.text('קפצן על: השלם שלב 5', p.width - 50, achievementY);
        if (unlockedAchievements['superJumper']) {
            p.fill(0, 255, 0);
            p.text('✓ הושלם', p.width - 50, achievementY + 20);
            p.fill(255);
        } else {
            p.fill(255, 0, 0);
            p.text('✗ לא הושלם', p.width - 50, achievementY + 20);
            p.fill(255);
        }
        achievementY += lineHeight * 2;

        p.text('חוקר מיומן: השלם שלב 10', p.width - 50, achievementY);
        if (unlockedAchievements['skilledExplorer']) {
            p.fill(0, 255, 0);
            p.text('✓ הושלם', p.width - 50, achievementY + 20);
            p.fill(255);
        } else {
            p.fill(255, 0, 0);
            p.text('✗ לא הושלם', p.width - 50, achievementY + 20);
            p.fill(255);
        }
        achievementY += lineHeight * 2;

        p.textAlign(p.CENTER, p.CENTER); // Reset alignment
        p.textSize(24);
        p.text('לחצו על "התחל משחק" כדי לחזור למסך הראשי', p.width / 2, p.height - 80);
    }
};

// Initialize p5.js sketch
let myp5 = new p5(sketch);

// Button event listeners
document.getElementById('startButton').addEventListener('click', () => {
    if (gamePhase === 'level_complete' || gamePhase === 'game_over') {
        loadLevel(player ? player.currentLevel + 1 : 1); // Load next level or start from 1
    } else {
        loadLevel(initialStage); // Start from initialStage (last played or 1)
    }
    gamePhase = 'playing';
});

document.getElementById('instructionsButton').addEventListener('click', () => {
    gamePhase = 'instructions';
});

document.getElementById('achievementsButton').addEventListener('click', () => {
    gamePhase = 'achievements';
});

document.getElementById('resetButton').addEventListener('click', () => {
    resetGameData();
    loadLevel(1); // Reset to level 1 after data reset
    gamePhase = 'intro'; // Go back to intro screen
});
